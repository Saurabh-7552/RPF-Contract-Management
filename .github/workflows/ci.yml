name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: rfp_contracts_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up test database
      run: |
        cd backend
        export DATABASE_URL="postgresql+asyncpg://postgres:postgres@localhost:5432/rfp_contracts_test"
        python -m alembic upgrade head
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/rfp_contracts_test
        SECRET_KEY: test-secret-key-for-ci
        REDIS_URL: redis://localhost:6379
        SENDGRID_KEY: test-sendgrid-key
        SENDGRID_FROM: test@example.com
    
    - name: Run backend tests
      run: |
        cd backend
        pytest -v --tb=short
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/rfp_contracts_test
        SECRET_KEY: test-secret-key-for-ci
        REDIS_URL: redis://localhost:6379
        SENDGRID_KEY: test-sendgrid-key
        SENDGRID_FROM: test@example.com

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:run
    
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint || echo "Linting failed but continuing..."

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: rfp_contracts_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install Playwright browsers
      run: |
        cd frontend
        npx playwright install --with-deps
    
    - name: Set up test database
      run: |
        cd backend
        export DATABASE_URL="postgresql+asyncpg://postgres:postgres@localhost:5432/rfp_contracts_test"
        python -m alembic upgrade head
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/rfp_contracts_test
        SECRET_KEY: test-secret-key-for-ci
        REDIS_URL: redis://localhost:6379
        SENDGRID_KEY: test-sendgrid-key
        SENDGRID_FROM: test@example.com
    
    - name: Start backend server
      run: |
        cd backend
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/rfp_contracts_test
        SECRET_KEY: test-secret-key-for-ci
        REDIS_URL: redis://localhost:6379
        SENDGRID_KEY: test-sendgrid-key
        SENDGRID_FROM: test@example.com
    
    - name: Start frontend server
      run: |
        cd frontend
        npm run dev &
        sleep 15
      env:
        VITE_API_URL: http://localhost:8000
    
    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e
      env:
        VITE_API_URL: http://localhost:8000
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run Python security scan
      run: |
        cd backend
        safety check -r requirements.txt
        bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level=moderate || echo "Security vulnerabilities found"
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
        retention-days: 30

  build-check:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Check backend imports
      run: |
        cd backend
        python -c "import app.main; print('Backend imports successfully')"




